{
	"info": {
		"_postman_id": "681131fc-0704-4996-a0b0-9a596053365c",
		"name": "topcoder-challenge-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChallengeTypes",
			"item": [
				{
					"name": "create challenge type",
					"item": [
						{
							"name": "create test data",
							"item": [
								{
									"name": "test data - create type 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8231c9a1-e19b-4fdd-a9f3-6aab829d4f2b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID1\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-1\",\n\t\"description\": \"descritpion1\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb1\",\n\t\"legacyId\": 111\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82fedd15-3294-4f61-afeb-68bd8bdb58f4",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID2\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-2\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb2\",\n\t\"legacyId\": 222\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f26d94e4-27eb-4e67-aeff-1487161edd14",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID3\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-3\",\n\t\"description\": \"descritpion3\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb3\",\n\t\"legacyId\": 333\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "494b2ab4-807a-4730-90ac-65a3b1162b02",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID4\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-4\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb4\",\n\t\"legacyId\": 444\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8db96edb-41f5-4827-bef1-345b3e24ae92",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID5\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-5\",\n\t\"description\": \"descritpion5\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb5\",\n\t\"legacyId\": 555\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "create by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79016bbb-d6fe-48b3-b567-ca4bb23d22a7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb123\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bab1fd17-40c7-42db-8d3c-464d98c8ee80",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb456\",\n\t\"legacyId\": 456\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create without optional properties by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e594794f-8ccb-483a-98c5-edf6b95d068e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-without-optional-properties\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"cwoop\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3e905c6-b2aa-458a-ad30-fdf900aab88f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"isActive\": true,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3970a8ab-61d3-4ec3-97f0-4ffed615b6ed",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"abbreviation\": \"cf4\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c284d4fd-1591-4b0a-afd1-b46a07ff2fb9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"isActive\": false,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97471c1d-61a1-4ee7-85bf-926d5047360d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77291e78-a57a-4f01-9578-afa0275fae51",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93d0a5c3-52cc-43d1-b055-f6ea85e0ba48",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a572a5-f6dd-4667-a3d3-fb4a53615265",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5950d48-a97e-41c9-b133-0ec533b1fc48",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"type-NAME-1\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb121212\",\n\t\"legacyId\": 123121212\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53ac3356-119b-4963-a024-a22db591ce22",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TYPE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb565656\",\n\t\"legacyId\": 123565656\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be16660-3c3f-44cd-9a5c-4175db148c14",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge types",
					"item": [
						{
							"name": "search challenge types 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e87041be-15d7-47c3-88d7-23350aaacde6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?name=-name-&description=cri&isActive=true&abbreviation=abb&legacyId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "name",
											"value": "-name-"
										},
										{
											"key": "description",
											"value": "cri"
										},
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "abbreviation",
											"value": "abb"
										},
										{
											"key": "legacyId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13f2a35f-9247-4048-8315-1a7a9856e16c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=true&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f923d51-88c3-4a1f-8e4c-33b62b4e3c9d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd61b827-6cbe-4092-838c-285cb93b6fd1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18bb7ca7-d038-46e1-b0a9-c72351a085a7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?legacyId=-5678",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "-5678"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type",
					"item": [
						{
							"name": "get challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "139abae6-a539-4aba-be77-b6cd9c732695",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67ffff47-6d35-4d0f-a468-1f0f74ac483f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aa5ebaa-a798-4f25-b762-129d2622be61",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17f64fef-3d29-4d83-9c9e-875ffe006700",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge type",
					"item": [
						{
							"name": "partial update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42786bb5-71f0-4502-b6e7-6fd40dbd2015",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\",\n\t\"legacyId\": 123787811\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0469b05-5507-48bc-a943-619378158da0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"add-description\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d281825f-c3db-4f55-b669-278e99f157d0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a782ef7-864e-4ff1-a2f8-edddb47c17ee",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "080dd3e4-7132-4cfe-bb53-eb4ce12cb610",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"description\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c4ad71e-fb76-49d5-9f17-fcb9ea66e6d3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"isActive\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "716562d3-5997-455d-922f-8d1da172baaa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98a0a1d8-e068-4ba2-9ab3-efd63bfa3a38",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": -1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afd60b96-d50d-4da1-b6b8-3d4c669bcea0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab0e8f7a-77bd-4af9-93ec-f26abedf30ad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7ce46ac-804f-41a0-99c4-762dbf3dae09",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "373ab24c-4f86-4344-a9cc-ee8337efd4e2",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61d1eb75-9abf-4028-931a-4fe2049902b0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23529b37-2248-4a75-acf7-b979ceceeb65",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-1\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "399fddd9-1d7a-4f3a-8590-08f8bdd9161e",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e08486a3-17af-4144-8c98-4659f9ac2035",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 222\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d32976a-5589-407b-9e2f-e5b975e0a3b2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9829eb5-4b4a-441f-99bc-a763501d77c3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type",
					"item": [
						{
							"name": "update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26a18d28-d7f5-45db-8901-eb1e3cb2e89b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-1789\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb789\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e6fe316-5d54-45d1-af10-ef195966f031",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb56756\",\n\t\"legacyId\": 12356756\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f606eab-1d06-4bdc-ba88-b27d906ebde7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc805477-80aa-423c-887e-7c8885e01138",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": 12345,\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86591eaf-a51e-4f2e-a389-61abca8abede",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 123,\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter inactive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d364825-415c-4ece-8806-a4011aa03153",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": 123,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "033a0190-886a-4ba4-946d-b7ea99ceb9f8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": 123445,\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1109779f-7e8d-4cbe-809b-b2261615e954",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"123445\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d40f5886-10b8-4ef5-b231-fe41d2fd59e3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter isActive  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7eca5bfd-d0a0-4c9e-9d0f-a7fda397f751",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"abbreviation\": \"123\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter abbreviation  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2563fad2-ea8c-4577-95f9-4773923c01ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5f7e49c-9c78-455b-9ecd-3ea45d22ca55",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d54b5701-58cb-4ad7-afcf-d22bd852389a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eca44321-12e3-475f-a8bd-3828bc17d921",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ad9225-e632-438a-ae40-07a56f65ab70",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca5c2f82-0ea3-495b-a0fe-07736baf769f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "468cdefe-c784-4e21-ae41-fb59580b2597",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaaabb34342\",\n\t\"legacyId\": 12322338899\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ef705a3-5248-4c16-a7f1-8d11e4d16a84",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaxxabb34342\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08ce7041-1735-4a7e-a70b-b83f3ff7daeb",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb1\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b29c7ed3-03e4-4715-8403-7540f4cc6d51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b98a83ea-30ea-48ab-bfca-4fdd3a44cb79",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengePhases",
			"item": [
				{
					"name": "create challenge phase",
					"item": [
						{
							"name": "create phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa919bfb-f24c-4a95-b606-a74b0844f2ed",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5a2fddf-f250-4601-a7e3-6351b8e3a24c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-2\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c79d9aa-b7f1-4c7a-8e05-ad94b2ad49e8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-3\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4cc71f2-8e30-4029-b2dc-6619b5999d22",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-4\",\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be166e00-7839-43df-b436-8ab128accfc7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"description\": 1111,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c00ff276-7a05-422b-9f69-454eb45fdb5e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 4444,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57970a8a-6c08-45c0-8353-f53f6dc430b4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": 10000,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78fb4a26-f6c4-4b5e-bfef-e506ad8292bb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": true,\n\t\"duration\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3a9fe33-5bb1-4eb7-85bb-f1a8ddd1b310",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a3bf3e6-0099-4cab-91ff-a7006fc7a13f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "116968f2-4947-4dd2-b0e6-4ce7746b4d5c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"isOpen\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61a9b12c-46bf-4fb2-a37d-bce0661b570f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4397e327-4555-4d16-a65c-48938d89a3ae",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daafee7a-44c7-47cc-b626-73a96d7d98fa",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase via copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96ec443a-dcfe-4f2f-954e-210a270f7317",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79cb64c7-5e32-4c82-9c6d-36f0d9e97b87",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"PHASE-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 100000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c012e455-b803-407d-ba1d-da4c95d3e65c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_PHASE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4d1de87-ec8b-44f7-9ce4-7aee6329268b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge phases",
					"item": [
						{
							"name": "search challenge phases by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "188d6edd-2269-431f-a803-a77bccc20b84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases with page parameter by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69075974-49d8-4450-8655-147e13d19d4c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph&page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad8164dd-9af7-4f2e-8d31-8ec04c25b464",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e2409f2-0fa0-461c-a745-5e6fa08123d7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "002bded3-3134-4f4c-b9c9-37a16af81a5a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c072d900-4d6f-4409-b672-efe2bb7966d7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge phase",
					"item": [
						{
							"name": "get challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "006b2ced-2c9a-4f47-af7d-527dd7acdfd9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "290f1ab8-dce9-4664-bdeb-efe957b6cfe4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c55154e4-be0f-47ea-84e1-e129d51dacdc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d52dbc84-1e96-4f77-9ac1-b3ffa386957d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1579a35e-c5b9-44d5-87fe-a23caab131f0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d20b3f-906b-44fd-8d26-506d3c0367f4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47a72184-f24c-4f36-8cf5-fcd5bb202e2f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf56bd6a-f6ae-44b9-9b11-3a6ee6518da2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a285a5c-8770-4602-893e-996113894b94",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b096556-1e70-4b1d-a85d-3cb5c92d9f11",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge phase",
					"item": [
						{
							"name": "partial update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c32e747-5271-485c-9c21-93f744c0aefa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847c0a5e-a931-4551-9326-89473ce0bcbc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-2\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8041104-6e56-418f-89b2-7bac4477df05",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed0e1889-e441-40c7-bc0c-05552a3994cd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 199,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc88fdee-5cfd-4130-ab70-d9b4092c7268",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"description\": 5000,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65ba2eb9-442e-427a-8184-9b195104255c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": 1,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa879ffb-4790-44ca-a5db-ccf4c84d31e9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": \"1day\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52f97706-3095-477c-968f-f13645e33b2c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26947f90-fdbe-4394-a2f7-c7413a0aa52a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aef9473-d586-4719-9db3-862969e8b4a7",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de98541c-10c8-4900-b5c3-0a23da17c14a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79e04e75-a3c3-4099-8533-81161e697f54",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1225da51-8d10-4608-96c9-2f24be4e7b51",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-PHASE-2\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e432e6e0-2f6b-4999-8d45-ff0afe81221f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be81821f-1f4f-4294-89b7-106fce620d07",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge phase",
					"item": [
						{
							"name": "update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ebc8832-f65a-4a92-9b83-aba3e4b27f06",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4613b635-b124-4351-a604-505a5e288e9c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-PHASE-2\",\n\t\"description\": \"add-description-in-put\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8aa2110f-16c2-4796-bfb4-b3e4778d8053",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffc2ce04-0c11-42da-b2ea-d6d3e5a20b4a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 12345,\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d61e9941-0a8f-49b2-8fc7-d57399944126",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fa41653-c7c7-4f88-815f-e4ade57cb1ea",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8b7b29d-e602-4a58-a8c6-f3ee835aa941",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbd790ce-984c-4062-babd-90bcaf921034",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70b57103-f3fb-4806-a1a2-abfd9169b93c",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phAse-3\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "719fa63f-5e64-45fe-a852-34dc3ee02124",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950a822f-4aff-47fb-80fb-be3b46ce1d7f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge phase",
					"item": [
						{
							"name": "delete challenge phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01b42c29-0f65-489a-9dd7-4b7ef191f038",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5797d21c-5c88-4e7d-802e-d4080ce2bac1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f40bef6f-3de2-47ed-bfea-17e4b1825bf8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ec80c13-835e-4cdb-ab03-cdde73e44c05",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0acdcd3a-eecf-44cd-89fd-2476c8d043af",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ab65590-2317-47fc-afba-5f60b8e14bdb",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "688ca29f-5def-4fae-88cd-808b6a687966",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c4b6c1-71db-4b94-962a-990a34847dc8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77d31917-178f-4d21-9b8c-bd33d7581d74",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TimelineTemplates",
			"item": [
				{
					"name": "create timeline template",
					"item": [
						{
							"name": "create timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c0c2b0f-40c7-4ad6-b43b-735f6fc9a363",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7c275f8-6b60-47c8-879d-71c65beed225",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template for delete testing later",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be75efad-a950-4c57-871d-e3e6f1756621",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"description\": \"desc-3\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template contain invalid phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38ed298-7e7d-4086-bf97-9cd622ddae11",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45922708-fd35-47aa-baba-726856bf794a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0498ba1f-8d78-491f-ae29-df5ad77c4ad0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": 1234,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8546fb00-8832-444c-b3fa-f0c68af78a72",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": \"active\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50f9b90b-8bb7-4d39-b4d3-31f7a3dccaca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea402e2-7e3c-48ad-8d2a-7f48365332d5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4823831-913a-4139-9a3b-1e0e30df930e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "338d1629-585b-40b1-94ce-5d43ec34c057",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34149429-395c-4d49-8d9f-09de5f6bc1d9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4414d394-2e26-442b-92a7-5cfaff5be5af",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cccdc4f4-8846-4b6b-941f-248436f1c064",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a61339-f876-4a1f-9554-785b702ce15a",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"tempLATE-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819bd7d8-3531-436d-a159-23d4b42bfa40",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TEMPLATE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04edf789-4801-403f-847d-213e3c650aac",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search timeline templates",
					"item": [
						{
							"name": "search timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa1cafa8-76c2-4b9f-9482-8ba19df4850b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template with page by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dd74389-7c06-40a0-a772-725396792768",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87ff860f-3ffa-40b4-891e-efa90b03dd89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=LA",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "LA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search timeline template invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a808bc4e-5d59-4ade-b41d-90243ff3e35b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get timeline template",
					"item": [
						{
							"name": "get timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7df5ec93-673f-4ebe-a980-f88ee2863c34",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3f175aa-1d0c-4b53-9330-a796e771f2d8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "954fd747-1fec-4d6a-8c34-512ceeee348f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f196f9e9-b89b-46e6-ab45-bf287bc5030d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34561f7d-7bd7-4afa-9f4b-be789ea9f135",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bf7b625-f145-4a6b-aa14-28ce10132d4f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9b2fe18-9d9e-4216-ac94-34f442a82e62",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "372d868a-9c10-459e-af7f-c3bf8f717a92",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5ddd27d-064f-4ece-aa2b-95414473f8dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63d201a8-6243-4bd2-8c17-69755feb6314",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update timeline template",
					"item": [
						{
							"name": "partial update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e60c4b1a-a0cf-4d1b-8a5d-7713400e551a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f8a8bfd-733b-44aa-9c95-ea3df6b1af7e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template phases can't be empty 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2df8bcae-a3a0-451a-ab79-5d6619cc544f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\",\n    \"phases\": []\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd8b2b6d-0b7f-443b-a918-fb1349664427",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a6d8ecb-eefb-47cb-bc5a-d2c3583eed10",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd674616-45a8-4b9f-b116-bc5e2aea4262",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"isActive\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "745e4748-dd37-4ca4-9cf7-a1f2f3189a9d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "109e2007-b3c7-4be0-8ca7-3ab94d7228a2",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb800b51-9271-4c94-bfad-b716e32f9e66",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea1f3cee-9afd-4698-b797-baa996ec9cec",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9bb5b7-b398-4eb4-b99f-59d9cbc1de8d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template  duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad33b045-2920-4faa-9853-3a85b62914e3",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e76f7f86-a740-4f74-b710-7060df2f68db",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-m2m\",\n    \"description\": \"new-desc-m2m\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40a9cf01-16d3-481c-8f43-2ec28f25f124",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update timeline template",
					"item": [
						{
							"name": "update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "861767c0-1578-475c-92b2-9f4c4de69e4b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0b17cdd-b0ee-4720-91b3-7782d7a02c9d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template incorrect phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9515ccd8-8b0e-46f1-a4b2-ae84dcde0db8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{SETTINGA_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6443bdd-4fbb-435d-b350-ddaffc18d1cd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba13e738-4f1e-4f58-a1c0-143d13bfb7fa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1221,\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adb2d7e5-775c-41d0-9c73-22eb21773cc4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": 11121,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "777160e9-1927-4c3d-9650-b973c98f4865",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": 123,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57516cba-7eaa-4673-be84-3640ad6f15a8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc2b36b1-720b-4e63-9991-0088475c4fe9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7100b0a1-67e1-4473-b4e3-00af7c2f46eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96e11e98-65dc-4acc-997b-23403aaa90bd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03ffca3d-751e-43d4-8a07-055d01a53d5e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64b9747c-7bb3-4f2d-85ee-cdf3d0d0b4c4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffe361ad-2f3e-4ad0-88fc-8ff61bc75512",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60f75d49-e8cb-474c-863d-77918dde044f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5c2585a-28a3-483b-bcb9-5309e8920286",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEMPlate-2\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66edb47f-e453-4e0b-ae3f-3338c04df1b9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "424f223d-3273-4ef6-a0f8-c1cbb7a55579",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete timeline template",
					"item": [
						{
							"name": "delete timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbfac7e7-38d4-4283-bf9b-bdc501711228",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7440ab94-4011-45d2-bbfb-4dc8451787aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ff9651b-9fc5-4ac2-8fe0-cddf7afb5d59",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cc68a0b-977d-4a5e-94d9-497cde36033a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41a9e43-fb64-46ca-9881-a07745cb5361",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75d0126a-d6ab-4fd4-8f6a-178b395231fd",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976e23b4-3b3e-429e-a0a0-dfd1d77714a9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d30d292f-3532-4118-95ed-e25cc4e52abc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e4fc35a-898e-461b-a5d9-8fb9b633e732",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengeTypetimeline-templates",
			"item": [
				{
					"name": "create challenge type timeline template",
					"item": [
						{
							"name": "create challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5799611d-dda1-430b-adcc-e2593bbf44fa",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPE_TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e143bb6-dba0-4d16-a425-343d194ed909",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4fb1c0d-0112-4e06-91af-bb3032b3d4a7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f559eb-7882-4956-9896-6cecae4e5e70",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9268b329-1a55-4ac4-b08d-bb0d2bd7089a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c828c4d1-ddf7-4375-b497-935c0473fbda",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"invalid\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with timelineTemplateId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aefffd52-dc54-4c69-b99c-65a25fb4326d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with typeId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "901a073c-051b-4099-91ce-259e83d28dc3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1756f95a-c61e-47c9-b8fc-ebdbcca92885",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98ffa521-8a14-4783-a83d-8b870943f78c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad52d505-3359-4b65-b034-a96bcd3865dc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 403 by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed41fe52-4707-425e-af2a-00bd1099a78b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge type timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "929fc828-6939-4532-8935-4036726fe0bd",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_full}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2e1ffb4-26ac-44f8-ad73-6e6cbb9c86d2",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb33d0ca-d6e0-454c-821b-133ce02ca870",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b17e4077-2bfa-4b09-acd2-c334ab3ae7ea",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge type timeline templates",
					"item": [
						{
							"name": "search challenge type timeline templates by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f74db39-3f7e-4672-9ee5-74dae4999e05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge type timeline templates by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab8900a-5e31-4bd2-a243-6ebf43516fc2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "690c25bc-7e2c-4d54-bfcc-1400b45b7ad1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?other={{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "other",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28e4d730-6b8e-4df9-b1d4-e3f510686991",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b56fddd0-2ba7-44dc-91b3-504be1e2dcbc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?timelineTemplateId=12321",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "12321"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d487d22f-6c9a-4af1-a388-699cd7c62ab6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e2db46d-3a40-465c-9236-6165862a5281",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type timeline template",
					"item": [
						{
							"name": "get challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6981556-c8be-479c-b615-660583034cc0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "921aa2ae-3d6b-40db-8c51-f68196ff587a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b471d522-a3c4-44ab-b055-f76e06d842c1",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using forbidden m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "baa7641b-0d48-4e15-9877-d4cc63400011",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98ca7607-454e-4d73-b2b7-2ee6693bb888",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c73b3b88-526b-4f7a-94a1-3a0e7021a6d0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c66b72c-00b0-47e3-a240-139e5b9bff19",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edea3334-420d-487e-a2fb-107d0a6a5624",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee6d7ac3-d2ed-4290-b1a1-bd7c97e48c01",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb98a5b0-0773-4563-b99d-56776b64cbb0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70c02e78-7cf9-44bb-9f8f-b20172f32b89",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type timeline template",
					"item": [
						{
							"name": "update challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca8c0864-70ce-4619-961d-7aa8590d4dc3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fa7da08-5850-45ad-8ca5-51f19af9ca6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acbff6b0-4da9-44f2-a1b7-768d97277f27",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cfee2f0-f3e8-45d4-a680-d117a86613fd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d01c8d1a-b134-4ee4-a2fb-d101d816ec1b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5494c379-e140-4aef-838f-af558303a28e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "544d9653-b8ff-4f68-b499-c06a670940fd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n    \"other\": 123\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fec3213-9f31-4fea-96d5-dabae20755c9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "626bfd13-2dcd-43ef-b7df-468417fac9e6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0af9f1e9-fa88-4e20-b14b-f80a1aa942f2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": [\"abc\"],\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d5f3e2c-0b74-44ba-b7e1-70b7fd3ddd90",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": [\"abc\"]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 timelineTemplateId doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7a61880-f5c5-45c7-9669-d6777d6bebf6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 typeId doesn't exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6846f471-5dde-4b1f-92fe-9f5ea844b4c1",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab70678e-da0d-491d-a70c-d8dccaab8bd3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87c8767b-4cd5-4451-8943-61f5fb033b3c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5de681a-d89b-43bc-8a8f-e7204a7bc716",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c5be1a-2228-4246-b733-23c7f6132ac3",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7dde9b6e-f9e5-4db1-80d9-b2230e0653d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "868b46cc-2f0c-479d-91ae-cfa74a458b53",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge type timeline template",
					"item": [
						{
							"name": "delete challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a7a7f65-2221-4342-92b4-f20894490b27",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e3b92d8-e1e1-4b94-96ac-fa461d79e5fa",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1ac15f9-15e0-49f3-909c-cd639cc2a244",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 expire token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12ee7355-48dc-4da6-aaa8-79d4914242a9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef1aff11-4070-4d18-afa9-394a0294bc8b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b4153f5-0cbf-4507-af62-7c74c547ea10",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "648e0948-8364-48bf-9c47-06e80031674d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68eca427-b2c9-4938-8337-534ebfa65a42",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "56b87585-2213-4070-bad4-6b9746b2f4ce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd0b5bad-7e0e-4d9d-af2b-4f82b00d15ad",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5a6f3573-8183-44a3-b8c6-71303f8fb9d0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e643d8ac-d6d0-4e9d-9250-f1596666fc0a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge",
					"item": [
						{
							"name": "create challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e187aa90-0977-4800-8fb5-7cda4279cad7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3bccb4d-9f05-482f-82fb-369ac72999c7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"gitRepoURLs\": [\"https://github.com/topcoder-platform/community-app\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb144ce1-75b8-4372-8c68-0a5b3710f312",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17aaeb99-1df1-4de0-9b80-c955b6b5affb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\", \"fb7e4a66-03d3-4918-b328-b1f288b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - negative terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3a28c9c-53e5-41fe-9d4f-503a46d69900",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [-20653, -20646]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - invalid terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bd51f35-11c2-4984-93d2-fa8ab5a57490",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"Invalid20653\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf7bb09-a294-427b-8462-4a473897bf41",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": {\"tag1\": \"tag2\"},\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40741112-4aae-45cb-bc2d-fcf13d8c22ac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using invactive time template 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56025635-0a14-4bd2-a42a-a0ca9c7d8b85",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizeSets 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8401fe32-1e15-4f4b-a317-c72861c0e9f2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizes array 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "612da597-236e-48f9-b358-6a75ef3269da",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": []\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54e8f99-a1e4-4fa5-af57-48034c9662e0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": 12345,\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c076e5b-f285-421f-ab53-a6581b8c96d8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76dc10c3-396b-4fa9-a395-d5bdbdfd685a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bba7e76-d75a-4c73-9733-06771a272e3d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"inconsistent\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASED_ID}}\",\n        \t\"name\": \"phase-4\",\n    \t\t\"isActive\": false,\n\t    \t\"duration\": 2000000\n        },\n        {\n        \t\"id\": \"{{TYPEA_ID}}\",\n        \t\"name\": \"not-found\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid prizeSet type 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "638b76f7-8134-46a5-9752-da85dad23645",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"invalid\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "faiclure reate challenge invalid prize type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53331b3f-03a3-488d-b34c-846611a6f22a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": 1234321,\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "607f142a-ae97-4732-836e-d3273f9eec9f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5a11e8b-1d73-4661-ba17-1860342ad8cf",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63ce3e8a-bb0e-47c0-95f3-2d80c2b76ae9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a95f34c-3c87-4fde-9073-f03a5ab08686",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3920215a-35c9-4ae7-a55f-3327b0768d2b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea3f93f3-d0c6-44ff-a849-4b1df81a71b8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_CHALLENGE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-m2m\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bebdc6f-49bd-4b35-afb2-9d212f215027",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 10000,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92948409-e5f4-4aa8-bad5-8c64e2adc7fb",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 200,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge",
					"item": [
						{
							"name": "update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d46b9fa6-6f8d-4d52-8864-a7f1637823b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with attachment by M2M",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ae67ba2-bb3b-4300-8cf1-141b22723083",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4cdb5d3-37e4-42a5-9408-0fbec84c4464",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d52c466-cbf1-4c37-a805-1ff254c4cdaf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 4\n\t\t}\n\t],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "810c90ae-6c95-490c-b00d-6b1cfce9d05b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd248c5f-d752-4954-88ec-85612e13f068",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge terms does not exist - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e10b597-f687-48f4-9603-67a86ca3862a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a823ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4d98e8b-57a3-4bad-8d7a-c2c2c4988587",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"groups\": \"group1 group2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdbcb069-206f-423f-878e-03dce7cf69a3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{TYPEA_ID}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "205d7a33-d172-4550-8760-fab2e93ac817",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": 123,\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7afc5cbb-2b69-4415-b9c6-2c75fba441f4",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fd87f9c-5ff9-46bf-bd23-114f338cdc6d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d774246d-67d9-4079-aa76-fed005560163",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9259681-3689-49ca-98ab-e5cbd78b1dd5",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51577a4d-c37d-470c-b1a8-ff16b950cf18",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71a57ddd-7d0e-4653-abb7-f4bee2c98ca7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e21d940b-84fc-4290-8014-1549ca2ccf7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa9949e-fb5f-4bc4-93a9-3f138426eb85",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aa90a48-1299-45eb-a318-57232629c4ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 10000,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge user can't access the project 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abbac62d-62b1-4794-a089-024bad5a1664",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"name\": \"update-name-1\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 200,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c35d24e-74c9-466c-9435-e4417687e893",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b15c533-ce32-4bc3-98d5-325c2ccb7e97",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "545461ca-42c6-46c6-b8c8-e6a07408cc1d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c72adfe7-6b9e-47a1-b8c7-a2e2e375cd4a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91e17e8-4725-4584-a892-42e819ac5c9d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbca278e-f9f1-40b6-ad77-622e76377c17",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge",
					"item": [
						{
							"name": "partial update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bfd87b6-ab33-4a6f-881c-59f55106ea96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 789789\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 terms by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3fc0f0f-8ef8-4c04-ba06-57901497153b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4571678-0379-44e5-b20d-1812471663e7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t \"winners\": [\n        {\n            \"userId\": 12345678,\n            \"handle\": \"thomaskranitsas\",\n            \"placement\": 1\n        },\n        {\n            \"userId\": 3456789,\n            \"handle\": \"tonyy\",\n            \"placement\": 2\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "494a13f9-eacf-4190-b623-49e43eae2efa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update to endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83cbdeae-b5ea-464f-899a-3b2865276fa0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 2000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "360dcec2-8f7c-45c9-8213-b9e28942a32c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7cf9f9b-10af-4b40-9918-c110f8bc4320",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a732ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88bd4cba-3d1e-4566-9df0-7259e3af884c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge duplicate groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "260604a3-a398-4d00-9ecb-15811c3fa1fd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [\"g1\", \"g1\"],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge null group 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65698d04-7e05-43bd-9464-2125fcdf8d2c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [null],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "224ab380-91d1-4ed8-bc8a-3d9879f46e51",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccd0666f-656c-4fde-abf4-8a44c2528361",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "901c6c93-930d-407c-a46c-cc6969a194f0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19a85dee-e639-4c1f-8909-503b9e9412be",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca81c47d-2795-4d35-a6dd-905ba81a1a1a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e56f6f54-f621-446f-9cd5-0e21e0e32ec8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8f1c572-2bed-4d46-8cee-1f4db8b952c3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e07ce5ad-e15e-4456-8b35-558cb8b735ad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"new-update-m2m\",\n\t\"description\": \"patch-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge project not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42cd7baa-7aa1-488f-a23c-3cee4a1fc614",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 1000\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d89ac80a-439d-4626-87ef-a1e94fd53e04",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 200\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge  from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f648e541-a800-4c7c-9fc0-08a03dcbeeb1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"Active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a5b5f5-02cb-4f96-bd11-4ee95bb1e810",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c30bd9e-fbf9-4c4c-a653-33f38f7e62b4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db30c0cf-a6bc-493a-920d-172590ac88e3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e7df08c-52a5-469f-80b4-3a2fe624ca14",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge",
					"item": [
						{
							"name": "get challenge 1 by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73711694-b120-4f1e-a33f-276ca2ff29ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcc6f1e0-23e0-463c-a72b-bc0cb44e6bed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87c9b7f8-7be4-4eea-ab41-0e513e8e3400",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by user without group access 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efe3b138-226a-4d6b-bdd1-ae74b6c46719",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "099d1b2a-76fc-4a6b-9d69-c6380f828791",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b01901d7-00a3-432c-a8c5-eb2e1a94e148",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge using m2m token with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe4c7540-5258-4506-9b40-f1490daeda97",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using m2m token without scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53b19a80-ffbb-4dd3-b9ac-a52fe41aeca8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a8ce7bc-e897-48df-9133-7fcddb83dc04",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								},
								"description": "it will be consided as anonymous user"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge",
					"item": [
						{
							"name": "search challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3608e2fd-8b14-4547-ad01-ee10d947d1f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&id={{CHALLENGE_ID1}}&track=track&name=TEST&description=test&reviewType=review type&tag=tag3&projectId=123&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&updatedDateStart=2017-02-22T00:00:00Z&updatedDateEnd=2028-02-22T00:00:00Z&createdBy=Tonyj&updatedBy=Tonyj&memberId=40309246&confidentialityType=public",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "id",
											"value": "{{CHALLENGE_ID1}}"
										},
										{
											"key": "track",
											"value": "track"
										},
										{
											"key": "name",
											"value": "TEST"
										},
										{
											"key": "description",
											"value": "test"
										},
										{
											"key": "reviewType",
											"value": "review type"
										},
										{
											"key": "tag",
											"value": "tag3"
										},
										{
											"key": "projectId",
											"value": "123"
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "updatedDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "updatedDateEnd",
											"value": "2028-02-22T00:00:00Z"
										},
										{
											"key": "createdBy",
											"value": "Tonyj"
										},
										{
											"key": "updatedBy",
											"value": "Tonyj"
										},
										{
											"key": "memberId",
											"value": "40309246"
										},
										{
											"key": "confidentialityType",
											"value": "public"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59d094c7-40b2-4ac4-b312-f9463d7280c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=40309246",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "40309246"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot using another memberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83950fc9-8948-42ef-b013-058db8ddf228",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=151743",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "151743"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by normal user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3b16a32-a4f8-4ab6-8895-10c6b920a489",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "179f7cb5-4957-4989-86a5-cb12309dadc1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=100",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "perPage",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid date 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74089ce3-6384-4e74-aa17-5eccfa753fe6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=abc&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "abc"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ad8ad61-9ed2-420e-8cce-3ae4e45a627f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?invalid=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter typeId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ce23e1-0319-4124-894f-8c6c78aa9ec1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?typeId=111",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "typeId",
											"value": "111"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4cda42d-9f24-42e1-86fa-60a29729a257",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?id=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "id",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter timelineTemplateId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4483a89a-6027-45ea-9369-a996f09a2473",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?timelineTemplateId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter projectId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ff99b61-f712-4111-969f-c0b0a9af9842",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?projectId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "projectId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter forumId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c0a9f48-f7e9-4f72-a0b4-d469da7dc4e0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?forumId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "forumId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e463fd67-5b75-4a86-8d24-d271f0320776",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?legacyId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5613452d-cb8b-4852-bf07-4f5a33d3d0ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?status=status-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "status",
											"value": "status-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter gitRepoURL 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d583a0-9e58-41f8-a263-bfc0a13fabac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?gitRepoURL=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "gitRepoURL",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter currentPhaseId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f031d63-b34d-47e3-b24e-6adeddefd677",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?currentPhaseId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "currentPhaseId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter memberId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43ccefa8-7e63-4721-aba9-6ee4a0183b33",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?memberId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "memberId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39b58223-0f95-473a-9762-17d8531cc60c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2016-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2016-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m without read scope(same as anonymous user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "371b22a0-987d-4563-84d2-f1d1eb461167",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search startData & endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b465ef5f-9e1e-4f3d-a2ba-bc3676af5cd1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&startDateStart=2019-06-01T00:00:00Z&startDateEnd=2019-06-30T23:59:59Z&endDateStart=2361-01-01T00:00:00Z&endDateEnd=2361-12-31T23:59:59Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "startDateStart",
											"value": "2019-06-01T00:00:00Z"
										},
										{
											"key": "startDateEnd",
											"value": "2019-06-30T23:59:59Z"
										},
										{
											"key": "endDateStart",
											"value": "2361-01-01T00:00:00Z"
										},
										{
											"key": "endDateEnd",
											"value": "2361-12-31T23:59:59Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AuditLogs",
			"item": [
				{
					"name": "search 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcea3662-9e7f-4d55-8df7-33da2e290466",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c2af3b-b652-464a-ad50-2caea5cdb6ab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID2}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&createdBy=ghostar",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID2}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "ghostar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search by user 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07659394-326a-498f-9377-7d40dd691e7c",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with expired token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be22a36b-206d-43cd-a73b-85ef102521c3",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{expire_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search without token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac6e9ee9-dbd5-4fda-b917-b428b867762d",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with invalid token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60b34b85-3386-4715-94a5-0dfe943b9328",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search invalid parameter 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2befe8c-8b56-43e6-9c07-085f43a7546b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&invalid=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "invalid",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search using m2m token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1a5985f-b2e6-46a2-a750-cb4bca0e74d8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenge_audit_logs_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search using forbidden m2m token 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db11f117-618f-45b3-83df-3ee3a5b7ee52",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenges_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Attachments",
			"item": [
				{
					"name": "create attachment",
					"item": [
						{
							"name": "create attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a5027eb-86d5-485c-803b-3c1b1b469494",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ATTACHMENT_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									],
									"variable": [
										{
											"key": "challengeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dd76b23-e656-425b-a0e2-83dd35ba38e9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ATTACHMENT_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_02\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create attachment bucket not in whitelist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75dcbbbd-2ee5-4996-9d4e-b02a1d1aab59",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01\",\n  \"fileSize\": 100,\n  \"url\": \"http://test_bucket.s3.amazonaws.com/key1/key2\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									],
									"variable": [
										{
											"key": "challengeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create attachment without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66e08cfa-890c-4a9f-ad27-06a290f0842e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_03\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create attachment with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f63438b7-5c11-412f-b08f-b431a09bf9ee",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_04\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create attachment with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5c5f8ba-c7c4-4dfb-85d6-5b9f7ccdd823",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_04\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get attachment",
					"item": [
						{
							"name": "get attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ebeba65-b6fc-4a3b-bc88-0b690ccc4df0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34d1356e-b9f6-4c56-9d83-e6500c5ebac6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07ecc590-fb17-4a89-8175-bfaec566f332",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get attachment without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40edfd5b-3934-4f47-b28d-b527aadc39a8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get attachment with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f5ea6b5-1086-451a-a0ea-f93d79617113",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get attachment with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76e10190-3da3-4c9a-8df0-07b2da471026",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "download attachment",
					"item": [
						{
							"name": "download attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7c2278-9281-469f-9b17-44e2bc8f1113",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}",
										"download"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update attachment",
					"item": [
						{
							"name": "partial update attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d907bb9-5a7f-4e56-94b2-441dfbe19f77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71c000e6-a938-4dcd-a8fa-e5c4066bca16",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update_02\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update attachment bucket not in whitelist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17fcf4e8-26ff-42cc-8b49-f5031a103464",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update\",\n  \"fileSize\": 125,\n  \"url\": \"http://test_bucket.s3.amazonaws.com/key1/key2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "337f5718-882d-4286-8e86-0d4a773ee271",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update_03\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update attachment without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "949bc984-751c-4f36-8b21-af2f0f71133a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update_04\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update attachment with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94452da3-2083-4c66-bc93-f35d1c289a5a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update_05\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update attachment with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b676fc61-c58d-4ae8-aa85-36e680c6634d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_partially_update_06\",\n  \"fileSize\": 125,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update attachment",
					"item": [
						{
							"name": "update attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55153ce9-a524-4f23-b780-3b414137bf89",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d57ffbfd-5fa4-43fc-a891-b02d9bbf39cc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update_02\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "duplicate update attachment bucket no in whtelist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed86ce37-14a6-4f5c-9c88-b31631bbeaef",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update\",\n  \"fileSize\": 100,\n  \"url\": \"http://test_bucket.s3.amazonaws.com/key1/key2\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8915d394-5f0c-417a-bed2-fcff9d177fce",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update_03\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update attachment without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aa1b45e-5ede-4923-8b65-e01e3b14c8ee",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update_04\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update attachment with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6946fa88-2fc4-4920-b9f8-e7ce1ca08e8c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update_05\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update attachment with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8772cc55-a6cf-4de1-a4df-2ade6f240227",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"attachement_01_fully_update_06\",\n  \"fileSize\": 100,\n  \"url\": \"https://cdn.filestackcontent.com/6NQ4A9nRUWLYY1Z4raew\",\n  \"description\": \"description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete attachment",
					"item": [
						{
							"name": "delete attachment success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03682f2b-f37f-4a07-8f0f-d4db4c8d81ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b51a5c5-4a63-4486-908b-a6d3a6215837",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf6b4ad4-9782-498b-8584-a6f98f6efdb0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete attachment without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c37d420-e021-4d99-baa1-f0a70bf8caeb",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete attachment with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b835e40-677b-4bbf-a9a9-c9c379de2cbe",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete attachment with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c41360e-5417-4dde-ba11-271bc50890a6",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "get app health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64c7fdf6-ca94-4c5c-8156-299edc1a9b30",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenges/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenges",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b0c4b798-90f8-4262-8502-f9639c889e5d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8785de44-9a24-49a9-86de-b0083455322b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Elasticsearch - Get challenge index data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9200/challenge/_search",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9200",
					"path": [
						"challenge",
						"_search"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}