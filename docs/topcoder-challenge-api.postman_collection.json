{
	"info": {
		"_postman_id": "b7de2034-afaf-4cb4-8120-b038784bad15",
		"name": "topcoder-challenge-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChallengeTypes",
			"item": [
				{
					"name": "create challenge type",
					"item": [
						{
							"name": "create test data",
							"item": [
								{
									"name": "test data - create type 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40f8487b-5505-416f-ac2f-14bb5eacfeb1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID1\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-1\",\n\t\"description\": \"descritpion1\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb1\",\n\t\"legacyId\": 111\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59e00327-ac27-4cee-a6a0-4244f930c179",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID2\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-2\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb2\",\n\t\"legacyId\": 222\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fc2cf39-df59-46d5-929e-d3d2d51ff740",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID3\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-3\",\n\t\"description\": \"descritpion3\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb3\",\n\t\"legacyId\": 333\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f691b153-bd51-403f-9b53-e51bdf54d791",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID4\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-4\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb4\",\n\t\"legacyId\": 444\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18d4e863-d0fd-4777-bb8a-220378795517",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID5\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-5\",\n\t\"description\": \"descritpion5\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb5\",\n\t\"legacyId\": 555\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "create by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8bc70aa-6463-4154-9f04-2fbcb0d18d3d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb123\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e55a84a-eff5-4a9e-bc30-fe45eb13aace",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb456\",\n\t\"legacyId\": 456\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create without optional properties by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f4f34bd-5c69-4904-afd5-c500f4e79ed4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-without-optional-properties\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"cwoop\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7db29868-b58d-44d8-80fc-80aad2aa9383",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"isActive\": true,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "240c6c10-5c7f-4bae-8c94-8fee04696f11",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"abbreviation\": \"cf4\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d28cd728-0c7b-4cfe-95b0-cd6aa7144e11",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"isActive\": false,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6a4fa79-fdb3-430b-8c26-244d300caeeb",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6d32f84-525d-4fbe-a178-035e4032aef4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "982f3ebe-3e0e-4e08-a4dd-ea101e9cf156",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cd662e7-de01-4068-ae6a-9c71431af698",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88acd6bd-81de-4e43-b999-3da00b4497ce",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"type-NAME-1\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb121212\",\n\t\"legacyId\": 123121212\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92a3f968-c919-4d31-a783-8b70748e98a6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TYPE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb565656\",\n\t\"legacyId\": 123565656\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a45d975a-006e-4378-a229-4612f16f55f4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge types",
					"item": [
						{
							"name": "search challenge types 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "470c0d95-7678-4a8f-a6cc-c7f36c1b34f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?name=-name-&description=cri&isActive=true&abbreviation=abb&legacyId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "name",
											"value": "-name-"
										},
										{
											"key": "description",
											"value": "cri"
										},
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "abbreviation",
											"value": "abb"
										},
										{
											"key": "legacyId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b970a742-0a75-400e-aa47-5cfc4a6d40f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=true&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c0dca60-2829-4e18-9bab-165a2c6c54e2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1120e97a-1893-4940-84f4-03ca6fd0a308",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42f30f6-4ecd-4e6a-8672-bda27a9a41ed",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?legacyId=-5678",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "-5678"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type",
					"item": [
						{
							"name": "get challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2ae4226-630e-4d6f-9f5f-8573bca9c5d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3eef191-a85c-487f-84af-6de26a90473e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7eac1ef4-12e0-4c3a-a87c-4dcfa64ff72b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef2613ad-9a1d-456e-85fc-c0dddef25b6a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge type",
					"item": [
						{
							"name": "partial update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0a7c1f3-8806-43dc-86b9-96cc0f3b232f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\",\n\t\"legacyId\": 123787811\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df2b6923-8ae0-4bf1-a43e-991b8d06af2b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"add-description\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17ae5e44-4c7f-4872-8d4b-a66b0f4e3b00",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2e1ffa2-e671-4c93-bff8-b95958cafa95",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0992795a-fd79-47da-a4d7-5d4a4dd13832",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"description\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c33150a7-2838-40b9-aa21-ca5565c3d8d1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"isActive\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf239900-229d-41a9-b2cd-e2b279070be3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "183543f7-ce47-4ea3-ad34-c5dcc2dcbbf4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": -1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aed1518a-cb64-4cdf-acd2-b1b025ee1709",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65b638b6-3130-4af1-8e72-66dc6453ab52",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07e095dc-9eb7-4d35-a9cf-573925d77055",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3f0d53-2161-43dc-a4ac-f3992fbb523f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b769fa5f-4f0a-40e3-8e09-b1b382b0c6e2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4775a79-2e7a-432b-9078-fadc6db1379f",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-1\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17fc0f89-f936-4c24-b85e-922b7ea3b516",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f154bcad-7ba0-4a5e-a8e5-0d1e43427439",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 222\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1df4e62-cfd5-42c3-886b-1471c4d5ac38",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc6bb5a3-576d-48c7-8099-b464f07b0e84",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type",
					"item": [
						{
							"name": "update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77880194-dd0d-4ad0-bf42-612bdcb7a8c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-1789\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb789\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ad836ee-7a60-4998-bb30-321c46467a05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb56756\",\n\t\"legacyId\": 12356756\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37184c91-d73e-4a17-b8f5-0b69635fae7d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c62cfd-3f35-460d-bf3f-bf79a1eab3e7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": 12345,\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "265e18a1-4a64-4e79-a7c2-0d753adab5a8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 123,\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter inactive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f658343a-47ab-4ac5-878e-dcece46b94d1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": 123,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9abbb2ec-623a-4f44-85c7-52629ba794ce",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": 123445,\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "570a2c74-3f69-414b-8498-5c738b9ae5c5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"123445\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5a3da41-9533-4515-badb-8ece7a60bcf3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter isActive  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3aafd86-9d7d-49e5-84da-d9025de54ea0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"abbreviation\": \"123\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter abbreviation  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd2bbae5-0781-4673-9ec8-9ed0477712f2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47b4a1e6-2e86-4d86-8973-73bf0ab97d90",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e387ada0-9171-411a-82b1-42d707db31a1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "794dce04-bb07-4892-8a2d-d66be6a41861",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8e1abe1-ee33-4865-a8ab-7e2e9606909e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dc0cd1f-8a36-4f79-84ab-05c3bc48d702",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb6d4f5d-a523-4fba-ac50-5e8eed6985f2",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaaabb34342\",\n\t\"legacyId\": 12322338899\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4697774d-ede3-40bd-b0bc-84923a8f3ef7",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaxxabb34342\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b51e745-cc23-41b8-96e1-a287931aeba0",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb1\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d69a80-8f0c-4d45-8c7c-0556e39161a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58e2cedc-2551-44f8-93f3-2e9e1df16bf6",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengePhases",
			"item": [
				{
					"name": "create challenge phase",
					"item": [
						{
							"name": "create phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81e6dbb8-5f1c-4f7b-a289-8f39e90f54a6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42aa1e0c-8ae4-4637-a255-ce8a723b7999",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-2\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9cf1180-e89b-4d44-a859-b993f8ad30e2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-3\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53ea9c99-1bf6-4399-9b8b-2ffcee2a8457",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-4\",\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af2a8e36-d747-45f9-9e72-cb0a5232e6cb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"description\": 1111,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94ed12c4-4b9f-4375-8c13-7fd2fd537648",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 4444,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ffd4a81-d7f2-49c9-9a98-a4d9177116aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": 10000,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1803994f-8c19-4dc7-83d0-6c92120af86a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": true,\n\t\"duration\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32abd94e-0926-45bb-982b-eeb9ae249a87",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d66ad4f-c85d-44f3-b752-3e77c269fe4e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "add5d9de-4f59-4e3f-9dc4-7b4b2b646978",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"isOpen\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "749897ee-ce43-4c01-95a4-b1ff346ca963",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d5e772-ee0c-4e94-8b90-9b89d04a3fc3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2ce78dd-7cbb-44af-8b85-f681556dbe5d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase via copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a332e15-bd2b-4560-b3a2-1ec668d3a5ce",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4297ca3c-580f-4131-ad2a-449371194a4a",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"PHASE-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 100000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64875bd8-ac24-47f4-bc79-799bc3094c07",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_PHASE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df5b16dc-deba-45e4-a4b0-6f9fcd68d6bb",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge phases",
					"item": [
						{
							"name": "search challenge phases by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaed566b-f12a-4634-8c27-6c1eb088be8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases with page parameter by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "010e1d3a-25f9-46fd-a627-0cfe621620a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph&page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9406c8-12b0-42f9-bd3c-5c2f4641bed5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d51c876-17bc-45cf-8876-2f04590d7016",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea74e0ff-0188-4d64-afe8-e64981436fe6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "984f7cd8-f9e1-43bb-9981-163cb07be673",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge phase",
					"item": [
						{
							"name": "get challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddd9602e-0a44-4978-b9f3-08078bc57267",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9408fe0c-3ae5-49e0-870c-4d9d74776752",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a9b8fd7-465a-4d23-9d57-41dc3cfcfe07",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6899c0c-a465-4502-bd0b-43d1b9919d40",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15fee902-d2f0-4ed2-a5fb-1f1a8912008a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c82ae073-c7b9-4791-80d7-e05a4438b24b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1e60fa2-9b24-4985-bdac-9ced84fd4500",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37bfe92f-6ea6-4a2a-8c5a-8afe504458c8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bacfbb71-9110-4298-8368-e3cee23ba19b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "340c60d2-ad84-4709-a5dd-229e5f4e2381",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge phase",
					"item": [
						{
							"name": "partial update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6deb5de-ac05-46ac-8e45-7285c6396785",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d30fc393-2b9d-45ea-bdb7-d1a1c646f181",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-2\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f0a35b2-e95c-4de3-af8f-36fcc3c8a736",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "442bfeb0-411b-4d01-b16d-2e9c882332b4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 199,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50a9cb54-8538-457b-bd83-12faa84f8be8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"description\": 5000,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00be4ec4-ad0e-4899-931f-286137f086f1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": 1,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80fda34b-55fd-48dc-bfbb-3ded32cc9fca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": \"1day\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6ab0b22-c684-48a7-a2e4-f831308e2d69",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbc239ef-995a-40af-a82d-0c7c25c246dc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae258d23-c2f9-46b8-b341-190ca778306e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e00496-1f66-44d7-9d63-0e67e247948a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99fa5f41-a82f-45c6-8065-14b2c6e57a53",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8f9c7cd-d534-4364-ad5a-30ea89b487c2",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-PHASE-2\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "674380b5-91f4-459b-9cc8-3d0c49558738",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cab780ad-f7e7-4b99-ba0a-b5039101c358",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge phase",
					"item": [
						{
							"name": "update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "320b6cb9-8551-4725-8cd9-aa2ed9bfc831",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0c81092-553f-4e28-a853-8311c39fd667",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-PHASE-2\",\n\t\"description\": \"add-description-in-put\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2db7a32-4f3c-40cc-bc00-f31fed6728a3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d46c1a4b-f894-4fb7-af77-badd1e8e0cce",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 12345,\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "922aaf10-b364-4594-a474-93fcd1b3aba3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c074078c-7415-4599-bb50-b4c563c52ebb",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d8e1815-c384-4a57-875b-e4146d90a628",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b0bb33f-0052-483d-8336-f7f2a1b1e30b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8149d873-63be-458c-92c1-a8b89ec354ee",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phAse-3\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b45a65d-8c7d-4db1-99f8-c181b97dc680",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5162f2a0-60eb-4fb0-8dec-e30ee0aeb487",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge phase",
					"item": [
						{
							"name": "delete challenge phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebac858b-4d13-49f5-ab1b-acb5f40b4285",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7525707-7306-4233-ab64-afeea5b6a140",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae6fd391-86f3-417e-9de6-321045e66e6a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "481c7c36-9a2a-4bf7-9805-e3b8fecf3415",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c0750ff-8cad-4692-b69c-67b70a901d3e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceb69b8a-58ca-4c8a-9c19-ef185bf19848",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d78c75a3-bfb7-426f-ad56-3d5fcb5ec4ad",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0814f2ce-95b8-401d-956a-c3bca88667f7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ca37f6-f15a-4f53-897b-d072e25716c7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TimelineTemplates",
			"item": [
				{
					"name": "create timeline template",
					"item": [
						{
							"name": "create timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "801976d5-ee80-4b11-ad5a-0615d6a3912d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdae57f5-5cbd-4208-93c6-7c2310c52303",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template for delete testing later",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05ab51d0-39e0-4b79-ac43-cc6ab96501d6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"description\": \"desc-3\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template contain invalid phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4eefaf8-028c-41e8-a40e-40430e98720f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a13da9c0-bbe2-4d4e-846b-a7c4810e3882",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d59b2cfc-d0fb-4196-82f3-071ad73da79d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": 1234,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeb67bf2-072a-4615-8b6b-7342f4d5f856",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": \"active\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01e6a698-f256-422e-b347-f919f44fc6ca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "865dfc94-6dd2-4273-bacf-23cf49ef64c8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b16a22a8-14cb-4cc1-a347-44a4876bf63f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b31d6434-1d96-4981-a2ed-e9ae8b5bccbe",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ee301d1-efbe-4ec8-b023-eb196d58b999",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c1e1316-27b9-4657-bc67-41e4786533c6",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8361a63-1c50-400d-a999-1e8a55682ac9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a58b6d7-f78f-4957-bb38-bc52875c3385",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"tempLATE-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27fe5973-c2b9-4f79-869b-752b730a5394",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TEMPLATE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66974d20-7895-418c-8564-0f25d571f882",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search timeline templates",
					"item": [
						{
							"name": "search timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5298af86-17f9-4605-8267-65dddfc6adfc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template with page by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "000d608f-2cbe-4c54-a86a-637736dcba31",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d996506-0c15-40be-bd21-925f3e9e6da2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=LA",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "LA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search timeline template invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ce752a9-7fa5-4c36-957c-e5bfaa50f321",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get timeline template",
					"item": [
						{
							"name": "get timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e66abff-73a6-4e9d-aaa7-af7e0769533c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a66344d8-01a6-4c1f-a643-e1aae1fef55c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e67ee09e-5f5e-44d3-9e33-3cbcdc2f5ce1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4626d360-b053-41d0-a076-4ff1d9679b7d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c655819-007c-43ea-a950-08f7a7119fe1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "544f6732-28e5-41d1-bf85-bc9229df2d2c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4246269-159a-4209-8719-531afa7a9b0c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd45840a-0d4a-4fcd-bc6a-b425e692d43e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47a31357-966f-41e4-8384-402fff5a599a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e5a882-d5d3-4b49-96f0-6df8f42ac873",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update timeline template",
					"item": [
						{
							"name": "partial update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f3f8a6a-d4f7-4609-8de7-c34635182a7e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "692a203c-3405-44c8-89a9-082dec3a46e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template phases can't be empty 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "344d67ee-8072-4cd7-abcd-b084131b2acc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\",\n    \"phases\": []\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ce71182-dad2-4773-a095-32e1c5de8cfb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8c099b5-4875-4a79-821b-927fee5e8282",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e729cfc-64c8-4b96-ad6d-bd8d16dbee6c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"isActive\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "825a0b4b-14c0-4269-bc6f-da874c008e77",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34781614-1dc7-407e-b755-2fb8f5fb70e4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c96dad09-c484-45b9-8561-e5c974cddccc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc9a7a26-cffd-498a-8e98-44199cfad323",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91a908d-9117-44e3-82d0-561bd0a90697",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template  duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f12f7c-ef07-4105-82cc-4d83986643ec",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "216f00e2-d460-486e-87e2-5d5463285a53",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-m2m\",\n    \"description\": \"new-desc-m2m\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c266029d-8312-4309-a05a-d0234e11ab3c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update timeline template",
					"item": [
						{
							"name": "update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f9fa22-1b50-4662-a2e1-0d7a6d8d197c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85cbbdce-88d8-4199-ba3e-da5708435f70",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template incorrect phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70435ddd-d860-4955-9e79-a4c276a70f3d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{SETTINGA_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d58c6159-7fb2-4f61-a1d3-c5bba1979dfa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c23a962-6f48-4eeb-9c05-2264aa4fad91",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1221,\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a31bd4b-fc94-4107-90f9-17ada1e2df4b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": 11121,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5900bae5-73a0-487f-825e-14b83d44ef1a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": 123,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a85c893-c4e0-464a-8181-a48060d128ae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1338a4d1-7ed4-4468-b31c-47e75f115239",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afad8189-b0d4-4126-9176-67c611dc7917",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c2275b8-a172-448f-8d06-b6427794c86f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "319da5fc-2124-467a-bc5e-67c16241dd82",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03df0f42-abae-4891-a22c-708df94500f7",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4320c9f-f0ff-4499-8450-8e070a1ccf46",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa6a66a1-41c3-4064-8526-6136ff4cf5e7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6b65934-3369-4601-ad1a-6d1ac414d652",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEMPlate-2\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b44aa6d-a894-4005-97d3-9360f452c442",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b986a81e-a11d-44fe-9f05-aacf3fb16e3e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete timeline template",
					"item": [
						{
							"name": "delete timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "063dc090-5b5d-4bcc-8a85-753d3895d828",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce624608-89f2-4140-80fe-d8e938d4b5cf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b5dae26-5cf8-45cd-8491-8d354e00a5e0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d875eec-f5d2-4f07-8b88-da6c01e56021",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5566fc11-9074-41bf-b4be-895f39f82732",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fa3118d-fe8d-4698-a53a-0daa0d9d47cc",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b3be781-7b41-442b-8e89-d20008a300b8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "089d3fc1-41bc-45ea-8d86-213196711793",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee3a814b-b5ad-416c-a997-dabe7ff5d9b1",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengeTypetimeline-templates",
			"item": [
				{
					"name": "create challenge type timeline template",
					"item": [
						{
							"name": "create challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f22b49a3-a28b-4e6f-901f-92bb23adf37e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPE_TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1fe139f-da94-4016-8204-8c3f40e29ca6",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e186a5ce-5062-4157-bd58-0e1d5c85746c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25ddb709-9c71-4411-8fec-8aa9d2b2f931",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95d3e29e-8540-48e2-bd9d-f00efedd5e58",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee4be10d-e2bd-48bd-ad60-610e9c32fe2d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"invalid\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with timelineTemplateId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1c1d3bc-e01d-4986-9f1c-bccac6269b37",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with typeId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac76995-b499-4799-b539-057c3d07f00e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76732b61-1105-4bd2-91d3-a756d15ce44e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d98bdb5-d2fb-4652-8138-8d7b05d67b1a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0491df30-4446-412a-8446-935cc951d7ba",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 403 by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b894af9-7d1e-43cf-ad64-ce9711550f9b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge type timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee669706-0adb-4fb1-8487-f1813aa857b4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_full}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd3900cc-1b85-404d-99ce-0255d145fdb6",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aee82d8a-4f87-4617-8072-53e340caed4c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b090cbb6-53bc-4e35-abf9-d902e2c08483",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge type timeline templates",
					"item": [
						{
							"name": "search challenge type timeline templates by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67492d30-5864-452c-b4ec-98ba532377b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge type timeline templates by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e92feb13-39b2-4a79-81e8-9e8b5ed4600d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dafdfdea-c2a9-40fc-9d4a-cf08dfff3e92",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?other={{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "other",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27470a43-d095-4471-bffa-e76a6f3aef83",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1a576a7-16ab-418a-9b4d-23c2c9e57533",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?timelineTemplateId=12321",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "12321"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa5594fe-6082-4f3e-b893-5d7a37480fc7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03085f59-0147-4240-ba22-444c205de47a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type timeline template",
					"item": [
						{
							"name": "get challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "521308c5-c38d-42d4-8f81-d4ac481ffc5e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "006a8a58-23ac-444d-9146-cc2cf7d02423",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bbf95e8-e406-406e-8460-e8ef6b0f6599",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using forbidden m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c995e98-8c08-453f-b2fc-090783b592a7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02e4dcb3-cf78-4020-af43-1e1d714f515c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b56a75c-2bcb-4b09-9131-05accab18414",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cbd3c2b-5011-41cb-8432-3df4f2e7c43a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c4bd24e-632d-4a01-b7e8-608e6e97c7a6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79d567f6-2ec7-4575-a2a5-7fe18117438e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4d30b2d-7f94-4e20-9640-deff6f953e3b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38aec374-0b0d-4925-b107-f9a45084c9bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type timeline template",
					"item": [
						{
							"name": "update challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ff7817-af2c-4963-a042-6bb00885ce3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4ae6b07-599e-4cb6-b08f-e5512cb9beab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3790a7cf-7c0f-4426-aaf5-abacb6dd6216",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b63be1a0-8c74-4a0d-9a49-3b58efd52782",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05957837-38a9-4d42-a9d8-65976a68795f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89e2419b-19bf-4449-8daa-f2e2ca280f8d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da180e96-8548-49c9-9bfa-6a3159af453f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n    \"other\": 123\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc2e5b9-3806-4e8f-be8f-253bdfeb53ca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a809c8ba-4f79-443d-8699-725a63a966ce",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee03a14-d458-4e26-8cbf-1653ddee61a3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": [\"abc\"],\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99f46bde-a8f6-4308-83f5-c18e4a1b7ace",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": [\"abc\"]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 timelineTemplateId doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebac88b-9ac3-4261-9c87-e2efbb6e9d6e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 typeId doesn't exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d0cccf6-55e9-43c2-b2ee-38f156203b9c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb0323bf-60cf-4225-b291-2bf90c60c1df",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "933ed4ee-ff74-4d7b-9a3e-0768e4af97f2",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c9d74e-a849-4544-a8f3-102b0111e117",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33c50e25-ed97-4c90-a42d-188b1c964bb1",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3e1b486-13ca-43d8-a899-215c62dc5f07",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "071768e1-d45c-4273-b975-11a8ee777d5c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge type timeline template",
					"item": [
						{
							"name": "delete challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847fe282-3403-4c5e-b479-a26f9f4e1aa5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "506b4f35-23fd-478f-89e1-ee1690b71d62",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d42fd7bf-1fea-46f1-9e84-415a3bd56f2e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 expire token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a51f8e68-4fb4-4d39-9bb1-a2bd8278bdc1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "474a42f9-844f-4a8d-81ae-0597f7aacb98",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce427de5-37f9-4eec-9ed6-9ed847295a01",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90704e62-ddbb-4319-aa87-9342a35bc927",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afd736d3-7ab7-4948-9a22-f86985d42532",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b162b15-e34c-4331-9b0f-ecc45e0ef7fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f5afb71-c79d-470b-ac77-748884b652c6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4ef0563a-5e4d-4258-a8e4-299567beb7c8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7226fa42-e6c1-4693-8b3f-367d0325216f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge",
					"item": [
						{
							"name": "create challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90838f17-9d16-44e3-a542-a605a1d006b3",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8479a57-7567-49ad-a7bb-a8ede826540a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"gitRepoURLs\": [\"https://github.com/topcoder-platform/community-app\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b50a1067-ee66-4748-8096-1df2444f0c52",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e37deb12-4d99-4dd1-a011-86ea0c8cc831",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\", \"fb7e4a66-03d3-4918-b328-b1f288b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - negative terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a58eee1-4f6b-4d45-84c4-a5859f345acb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [-20653, -20646]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - invalid terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c1fde06-e2a6-4168-88f0-31f591574832",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"Invalid20653\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a207a51-fed2-4dde-ba4b-0ba8210336a2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": {\"tag1\": \"tag2\"},\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7285b28-3a5d-4172-b9a9-507763cb3795",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using invactive time template 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e0fcfd5-91e6-45ac-974f-c7dbfb8d8b65",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizeSets 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c48d83c5-a06e-4926-a0b0-899c8456ea7d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizes array 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb73f449-f360-406c-85fc-8c11367843ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": []\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c63a12b4-5310-48ac-ad90-5a19cc3ed5f3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": 12345,\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a34822df-bb7d-427f-abd4-d74cb64db9fa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fc92d98-2a34-4d8e-a2fe-2fdb31383991",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2272aa43-1a06-4435-87e6-01f1a91f0643",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"inconsistent\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASED_ID}}\",\n        \t\"name\": \"phase-4\",\n    \t\t\"isActive\": false,\n\t    \t\"duration\": 2000000\n        },\n        {\n        \t\"id\": \"{{TYPEA_ID}}\",\n        \t\"name\": \"not-found\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid prizeSet type 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b4268dd-078d-4a44-8611-e1194b313ac5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"invalid\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "faiclure reate challenge invalid prize type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12934090-d3fa-4b38-b171-6c3a73cb95a1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": 1234321,\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b9e14ec-28d5-470c-8fc0-e524f5b648b0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b521dce-3d4e-475c-9fc8-d85d265c156b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b62e7754-a92a-48ef-8c11-de81be156ae4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8523dfef-2d01-4fc1-a3e9-b7c8abe2b5a4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "156c2fb7-c67d-4570-a4d6-8f110a4b5809",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "973683f9-008e-42e8-ae91-96f08eaabe67",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_CHALLENGE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-m2m\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20614dda-c8db-4fc5-8223-149e3822a0d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 10000,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f20e8f5-7cdd-45b5-a9ae-faadbd506035",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 200,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "upload attachment",
					"item": [
						{
							"name": "upload attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd2ce7ec-81bb-43ef-8764-e649f6d4cc81",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65e0495a-20d5-440d-a882-10ee5b4f035f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by normal user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8ac5d48-b6bb-4927-9053-93e81c936104",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6556e7d-a7a6-46bd-b01d-ae7043a1ca7d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by copilot not of challenge resource 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0ed7373-a7e4-4516-b015-5e0392f1a59b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment missing token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78300283-fc81-407c-9ed4-53b001acc5f0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bd7e45c-5ea3-4a52-b861-8f9cbf93335c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bf62acb-e4e6-45d9-8b47-6dfdce5db747",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment wrong file name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7c55151-d67e-401a-901c-9cb23c247df4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "wrong",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceb62ce9-2671-4df3-a586-9798e0e4813e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"TEST_ATTACHMENT_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_create}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f6e6d05-fdb0-4c31-a833-f4951d84d279",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "download attachment",
					"item": [
						{
							"name": "download attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac0d28cb-30cb-40a5-9a40-eb1c7a5b873f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d546768d-ce53-48bf-9a91-e98c03dfdfcf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by challenge registrant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7232d0c6-4c48-4511-a7a9-6b8076992e08",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment challenge id mismatch 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dff58a63-488d-4679-8df6-41bca65b1ee9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment invalid attachment id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a8de138-3330-4848-bb66-14e06eb235ca",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "129cb973-9a2a-4d0a-bf70-56553437cced",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9b6e1f2-edca-43ac-95b6-338c7162e8ae",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by none challenge registrant 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8788531c-8906-4708-8a65-eea637ea0e52",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by anonymous user 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9689b652-1542-4118-bab7-4a48b60e76eb",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bfe80fb-d778-4d0d-8eab-7831c47c127c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9546e59f-dcea-4b28-9fee-db462c4e2e60",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment missing attachment id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "081eccdf-d840-4249-93f0-e1c0c7141652",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bda0f0f5-bb5d-4b0d-b1fb-34b003b00cf0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5570a99e-20fb-46fb-878f-1c5c6855d937",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge",
					"item": [
						{
							"name": "update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8f2d9be-103b-4a91-8b78-46e546f2d999",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with attachment by M2M",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b370d8c5-6812-4f7c-9eb0-13a919a88b39",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "480edaec-79bb-4c2f-930e-6c9b7847c06a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f3753e6-a889-488b-8c79-e9ee63c35b72",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 4\n\t\t}\n\t],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e096a39-c12d-4dfe-b35e-b90664f85d11",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84170499-e0dd-4b3b-bf9c-4848265c523b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge terms does not exist - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d808cc7-282a-4a6a-b378-a5198768ae68",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a823ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f699508-c6fd-4e93-bf8b-7b96b090d3d1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"groups\": \"group1 group2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19fd4a68-c391-4060-9c80-e1c5eac2c080",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{TYPEA_ID}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38408114-3b1e-4f20-b4eb-57a8cb2008b0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": 123,\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51a6a35f-cec8-4d65-a2ae-e2898a1c46a0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04dc0f5c-4139-4bb9-a214-6fbc7245c9bb",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9260f71-901b-45b3-aa10-d30c9b8e93c0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c5397fc-c8ef-49c9-ac97-f66cd466523c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfd0353d-c045-4600-bda5-d27acd527cd8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3dc82-98df-4349-9cbb-87c8c230cf92",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3699985a-de92-418f-b5c4-f2720aa5acd0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35e3b88-3c86-4624-8582-27aa3deeefae",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15277b1e-0a6c-46fd-aa2c-54da2c78a21f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 10000,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge user can't access the project 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78ed48ec-3700-42ae-bfa3-0f12275e31a3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"name\": \"update-name-1\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 200,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60255e7f-f92b-4a5a-a28a-db149f33014a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90bc5b48-07f7-467c-83b2-e489d6c3a843",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4330f0d9-dd38-4649-863d-51599cdbb402",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdb1f0bf-ad03-4461-a669-a2961f4af274",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bb36052-70a3-4aa8-bb72-7561e3689390",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe5c6014-85be-402b-8a8d-34fc6142ce84",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge",
					"item": [
						{
							"name": "partial update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66eccc7c-74c3-4e67-9744-eddbeeae4104",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 789789\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 terms by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8dd3e05-bd7e-4433-ad72-d227878a8f25",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26345aeb-cec9-429f-9be3-455c45a4ec02",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t \"winners\": [\n        {\n            \"userId\": 12345678,\n            \"handle\": \"thomaskranitsas\",\n            \"placement\": 1\n        },\n        {\n            \"userId\": 3456789,\n            \"handle\": \"tonyy\",\n            \"placement\": 2\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d18d1e6-337c-4ecf-98df-ed6627a63b56",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update to endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdafb4c9-1188-439d-b1f1-a309874eaa4a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 2000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "543f8f2e-ab79-4bf7-a11a-701b4c9cd7fd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17b04a84-445e-400c-a7df-160f19c5769a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a732ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ba26338-b1ae-4d23-baa7-9860cf0bf738",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge duplicate groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55b353c2-37cc-42fb-a415-6ca6cf9661ef",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [\"g1\", \"g1\"],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge null group 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a31d8b86-d402-45c8-9349-3509cfd81485",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [null],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40256115-985e-40cb-9ab5-21e6a85fef7c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fedfdc2-3ed7-40fb-9c9e-402f0377147e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d0de222-8fbb-45c8-89f2-4f52f3cc8058",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5658e34-ae3b-4111-adb5-321784e6f07f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33f27c0e-4ad8-479f-b81f-60a57acac8a0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1226558-d638-4aa3-a953-1213d56a5898",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad031500-b3b9-454b-8067-4eb9403d238c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5493d67d-eb38-493d-bae9-ef1e9805887b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"new-update-m2m\",\n\t\"description\": \"patch-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge project not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f656426c-b5ab-4928-b047-bcf521fc8044",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 1000\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0217fd78-1bb1-454c-acbc-7b64ff24bb10",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 200\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge  from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56030d39-9a28-4d67-bacb-435af25cc700",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"Active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7172f697-1936-464c-bbcb-f90f032cf756",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c20cf69f-4937-4b73-85cd-d0b0d12a4626",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "907273c5-57bb-42c4-ae38-79e92b7ea064",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fcce2b9-64b6-4011-9325-d9472bbd6aa4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge",
					"item": [
						{
							"name": "get challenge 1 by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db9e6cce-9223-4358-88fb-f15e9b3c1348",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb9032d8-2fa1-4e7c-93b3-327615836d81",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f5ba451-380c-4c2c-96dd-aa09e6265ff5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by user without group access 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a06f7d3b-7fd7-4b27-9fc3-8b4a9461fdad",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba48a228-ddec-43da-9e1c-3856119bccbd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62a1064b-3805-4ab2-846b-f5519fc6232e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge using m2m token with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "478571ad-9082-4c0d-8209-3daf5fbaace2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using m2m token without scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e2d57e9-1be6-4dd6-8c3a-724011c51ff1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c6b48c-6c10-4412-a03f-39b2a5dd47b0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								},
								"description": "it will be consided as anonymous user"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge",
					"item": [
						{
							"name": "search challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8a8d7b2-b598-4a70-b57d-157327f98aee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&id={{CHALLENGE_ID1}}&track=track&name=TEST&description=test&reviewType=review type&tag=tag3&projectId=123&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&updatedDateStart=2017-02-22T00:00:00Z&updatedDateEnd=2028-02-22T00:00:00Z&createdBy=Tonyj&updatedBy=Tonyj&memberId=40309246&confidentialityType=public",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "id",
											"value": "{{CHALLENGE_ID1}}"
										},
										{
											"key": "track",
											"value": "track"
										},
										{
											"key": "name",
											"value": "TEST"
										},
										{
											"key": "description",
											"value": "test"
										},
										{
											"key": "reviewType",
											"value": "review type"
										},
										{
											"key": "tag",
											"value": "tag3"
										},
										{
											"key": "projectId",
											"value": "123"
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "updatedDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "updatedDateEnd",
											"value": "2028-02-22T00:00:00Z"
										},
										{
											"key": "createdBy",
											"value": "Tonyj"
										},
										{
											"key": "updatedBy",
											"value": "Tonyj"
										},
										{
											"key": "memberId",
											"value": "40309246"
										},
										{
											"key": "confidentialityType",
											"value": "public"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5ea2020-53ca-4cf3-9285-ebf7df5d7145",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=40309246",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "40309246"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot using another memberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fabdb141-2fa0-4001-8a12-988a6c2526bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=151743",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "151743"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by normal user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "233807cd-84b1-4d3f-ae31-faf370b14f8b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f723df6b-e320-4d2d-9ebd-7762d2603849",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=100",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "perPage",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid date 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b83f9c12-0340-46af-9f08-a5c7bf875dc3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=abc&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "abc"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca95b39f-b852-4325-a85f-4008c64bcb5c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?invalid=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter typeId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e15170b9-760c-4924-b299-af06724cec07",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?typeId=111",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "typeId",
											"value": "111"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3145b82b-2c71-4aad-a3d9-c027885217ea",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?id=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "id",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter timelineTemplateId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20c27119-f729-4725-b68b-2f0d4b96eb04",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?timelineTemplateId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter projectId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f92b85de-d465-495e-a38e-6db45746c640",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?projectId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "projectId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter forumId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b185bb1c-221c-4577-8567-8e326d7dbac3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?forumId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "forumId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9284330-9b82-4a0e-8915-38b5f45699e1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?legacyId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c8588d5-ac4c-41a3-8074-d5008b6e2383",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?status=status-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "status",
											"value": "status-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter gitRepoURL 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "441746a4-0038-4e60-bae6-ca3fa883e7a5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?gitRepoURL=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "gitRepoURL",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter currentPhaseId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e51753a1-9388-4553-b4ae-2d24557a67f8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?currentPhaseId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "currentPhaseId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter memberId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44ae9a9d-4d01-4ab3-9a75-806985a298eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?memberId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "memberId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe6144b-0da5-4810-b9be-5ef1f79abf30",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2016-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2016-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m without read scope(same as anonymous user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b39f9c93-67c5-4803-9e2a-ede771a16a86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search startData & endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1b44f3d-53a0-44ca-8656-74a00b0deaee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&startDateStart=2019-06-01T00:00:00Z&startDateEnd=2019-06-30T23:59:59Z&endDateStart=2361-01-01T00:00:00Z&endDateEnd=2361-12-31T23:59:59Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "startDateStart",
											"value": "2019-06-01T00:00:00Z"
										},
										{
											"key": "startDateEnd",
											"value": "2019-06-30T23:59:59Z"
										},
										{
											"key": "endDateStart",
											"value": "2361-01-01T00:00:00Z"
										},
										{
											"key": "endDateEnd",
											"value": "2361-12-31T23:59:59Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge",
					"item": [
						{
							"name": "[STUB] CHALLENGE_ID1 can be set by running \"create challenge by admin\"",
							"request": {
								"method": "VIEW",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "[STUB] CHALLENGE_ID2 can be set by running \"create challenge by copilot\"",
							"request": {
								"method": "VIEW",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "delete challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7748e11e-0536-4d66-821e-2acb8b9ee4e4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21ce91c2-727e-4942-94ce-f7b9ad0e1922",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b27f9844-172a-45ab-8d78-d8e648162de7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d6af907-bdc2-437f-9883-3040c1e12e79",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df9d716a-9a0f-4764-9154-2bd57532f0ea",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db2448ac-deda-4c6c-a47b-6c7af95ddf8b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2edcc5f2-8a0f-4791-93b2-da3a897daf76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8ed6d8-7a40-4ced-8176-fed5a8d8b095",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/:challengeId",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										":challengeId"
									],
									"variable": [
										{
											"key": "challengeId",
											"value": "19d20d64-e84e-452f-abd5-018e6abc68ab"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c46553ad-8bb4-46b2-84ec-ba7a029b74ee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_delete}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3eeabff3-ceee-47f5-a23c-b2ff1322a2e8",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AuditLogs",
			"item": [
				{
					"name": "search 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d062e03-80e3-4e9a-a2d6-1e157a87a4f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59d2691e-df73-41c8-bb8b-4ab905ebc647",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID2}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&createdBy=ghostar",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID2}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "ghostar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search by user 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a73a50a-1175-43ba-8eb6-048bef9199a2",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with expired token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "536e13b2-2edd-43f9-8c51-2cc6b19d187c",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{expire_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search without token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad4744e-1be4-44d4-ae6a-d0456faa76be",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with invalid token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09bbd9c9-6204-4cdc-bc0a-a3a56e170af2",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search invalid parameter 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "299bb2f2-e2a9-462c-8b53-f18bb17dfa56",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&invalid=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "invalid",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search using m2m token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eed56ee-961a-40b9-b5fd-7ff6d2e11ebd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenge_audit_logs_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search using forbidden m2m token 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41623fb1-d295-44bf-ae32-f004d6ec2f5b",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenges_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "get app health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfcfb1f9-de62-478f-9a13-64357e6cfbae",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenges/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenges",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5a9a60c6-02b0-48ee-bdb4-5eeb21cada90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "debaa0ea-5dad-4e2e-a092-fa5b01716d40",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Elasticsearch - Get challenge index data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9200/challenge/_search",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9200",
					"path": [
						"challenge",
						"_search"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}